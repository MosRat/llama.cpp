name: Build libgex

on:
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

env:
  BUILD_PRESET: x64-windows-msvc+static-release
  CMAKE_ARGS: -DBUILD_SHARED_LIBS=OFF -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded

jobs:
  windows-cpu:
    runs-on: windows-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Ninja
        run: choco install ninja -y

      - name: Configure CMake
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release   --preset ${{ env.BUILD_PRESET }} ${{ env.CMAKE_ARGS }} -B ./build-x64-windows-msvc+static-release

      - name: Build
        run: |
          cmake  --build --target gex test_gex  

      - name: Pack artifacts
        run: |
          7z a libgex-cpu-bin.zip ./build-x64-windows-msvc+static-release/bin/libgex.dll ./build-x64-windows-msvc+static-release/bin/test_gex.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libgex-cpu-bin
          path: libgex-cpu-bin.zip

  windows-cuda:
    runs-on: windows-latest
    env:
      CUDA_VERSION: '12.4'

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Ninja
        run: choco install ninja -y

      - name: Install CUDA Toolkit
        uses: ./.github/actions/windows-setup-cuda
        with:
          cuda_version: ${{ env.CUDA_VERSION }}

      - name: Configure CMake (with CUDA)
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release --preset ${{ env.BUILD_PRESET }} ${{ env.CMAKE_ARGS }} -DGGML_CUDA=ON -DGGML_CUDA_F16=ON -B ./build-x64-windows-msvc+static-release

      - name: Build (with CUDA)
        run: |
          cmake --build --target gex test_gex 

      - name: Pack artifacts (with CUDA)
        run: |
          # Package the main binaries
          7z a libgex-cuda-bin.zip ./build-x64-windows-msvc+static-release/bin/libgex.dll ./build-x64-windows-msvc+static-release/bin/test_gex.exe

          # Package CUDA runtime libraries
          $cuda_path = "${{ env.CUDA_PATH }}"
          $dst = '.\build\bin\cudart\'
          New-Item -ItemType Directory -Path $dst -Force
          robocopy "$cuda_path\bin" $dst cudart64_*.dll cublas64_*.dll cublasLt64_*.dll
          robocopy "$cuda_path\lib" $dst cudart64_*.dll cublas64_*.dll cublasLt64_*.dll
          7z a cuda-runtime.zip $dst\*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libgex-cuda-bin
          path: |
            libgex-cuda-bin.zip
            cuda-runtime.zip

#  release:
#    needs: [windows-cpu, windows-cuda]
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#
#    steps:
#      - name: Download artifacts
#        uses: actions/download-artifact@v4
#        with:
#          path: ./artifacts
#          pattern: libgex-*-bin.zip
#
#      - name: Create release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: libgex-${{ github.run_id }}
#          name: libgex Windows binaries
#          body: |
#            Windows binaries for libgex (CPU and CUDA versions)
#            - CPU version: libgex-cpu-bin.zip
#            - CUDA version: libgex-cuda-bin.zip (includes CUDA runtime)
#          files: |
#            artifacts/libgex-cpu-bin.zip
#            artifacts/libgex-cuda-bin.zip
#            artifacts/cuda-runtime.zip